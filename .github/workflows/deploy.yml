name: CI/CD Moodle Telegram app
on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master
jobs:
  #First we will see the application build or not , then we will deploy in EC2
  # Build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build the docker_compose
  #       run: docker-compose up -d --build

  Deploy:
    # needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: 'Create env file'
        env:
          DB_TYPE: ${{ secrets.DB_TYPE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          MOODLE_BOT_TOKEN: ${{ secrets.MOODLE_BOT_TOKEN }}
          BOT_MOODLE_URL: ${{ secrets.BOT_MOODLE_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          BOT_USER_VERIFICATION_DISABLE: ${{ secrets.BOT_USER_VERIFICATION_DISABLE }}
          TZ: ${{ secrets.TZ }}
        run: |
          touch .env
          echo DB_TYPE=${{ secrets.DB_TYPE }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo REDIS_URL=${{ secrets.REDIS_URL }} >> .env
          echo MOODLE_BOT_TOKEN=${{ secrets.MOODLE_BOT_TOKEN }} >> .env
          echo BOT_MOODLE_URL=${{ secrets.BOT_MOODLE_URL }} >> .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo BOT_USER_VERIFICATION_DISABLE=${{ secrets.BOT_USER_VERIFICATION_DISABLE }} >> .env
          echo TZ=${{ secrets.TZ }} >> .env
          cat .env

      - name: Copy folder content recursively to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./
          remote: /home/ubuntu/moodle-helper-nestjs/
          host: ${{secrets.AWS_SERVER_HOSTNAME}}
          port: ${{secrets.AWS_SERVER_PORT}}
          privateKey: ${{secrets.AWS_PRIVATE_KEY}}
          username: ${{secrets.AWS_SERVER_USERNAME}}

      - name: deploy backend
        uses: appleboy/ssh-action@master
        
        with:
          host: ${{secrets.AWS_SERVER_HOSTNAME}}
          port: ${{secrets.AWS_SERVER_PORT}}
          key: ${{secrets.AWS_PRIVATE_KEY}}
          username: ${{secrets.AWS_SERVER_USERNAME}}
          script_stop: true
          script: |
            cd /home/ubuntu/moodle-helper-nestjs
            docker-compose up -d --build
            docker-compose exec -T backend yarn migration:run

      - name: restart backend
        uses: appleboy/ssh-action@master
        
        with:
          host: ${{secrets.AWS_SERVER_HOSTNAME}}
          port: ${{secrets.AWS_SERVER_PORT}}
          key: ${{secrets.AWS_PRIVATE_KEY}}
          username: ${{secrets.AWS_SERVER_USERNAME}}
          script_stop: true
          script: |
            cd /home/ubuntu/moodle-helper-nestjs
            docker-compose restart backend

        # run: |
        #   echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        #   ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}

        #     #Now we have got the access of EC2 and we will start the deploy .
        #     cd /home/ubuntu/moodle-helper-nestjs &&
        #     git checkout master &&
        #     git fetch --all &&
        #     git reset --hard origin/master &&
        #     git pull origin master &&
        #     docker-compose up -d --build
        #     docker-compose exec -T backend yarn migration:run
